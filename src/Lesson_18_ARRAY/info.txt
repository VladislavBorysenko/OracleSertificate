----------------------------------------------Массивы-------------------------------------------------------
Массив-это обьект который хранит определенную колекцию значений, определенных типов данных
В Массиве все элементы должны быть определенного типа данных либо примитивы либо референс
--Длина масива не меняется
создание массива: int[]array1={1,3,5,6,7};
                               0 1 2 3 4
--изменить элемент массива:
array[1]=10; //{1,10,5,6,7} заменили элемент массива с индексом 1, на значение 10

--отобразить элемен массива:
System.out.print(array1[1])//10

создаем массив reference data type: String []array2{"privet","poka","ok"};
Массив reference data type содержить в себе адресса которые ссылаются на конретные обьекты

создание многомерных массивов:
int[][] array3={{0,1,5},{-7,3,3},{5,-1,3}}
--вызов элеента многомерного массива
System.out.print(array3[1][0])//7 (наша 7ка находиться в первом по индексу массиве, под нулевым индексом внутри массива)

-----------------виды Массивов------------------------------------------------------------------------------

Хронит коллекцию primitive data type (int,char){1,2,3,5,6}

Хронит коллекцию адрессов reference data type (String, Object){"privet","poka","ok"}

[a][b]-a:строка, -b:столбец
----------------Этапы создания Массива--------------------------------------------------------------------

1) Declaration - обьявление:
Declaration -создает массив который ссылается на null;
int[]array1;
String[]array2;
double[][]array3;

2) Allocation - рзмщение:
Allocation - определение памяти для элементов массива (размер массива всегда int)
array1=new String[3];
array2=new int[4][2];

!!! двумерный массив с разной количеством элементов внутри {{-2,3,4,7},{2,6},{5,3,9}}
int[] arr10;
arr10=new int[3][]; Мы не указываме длиу внутренних массивов

3) Initialization -инициализация массива (процесс предачи значения элементам массива)

а) Статическая инициализация -когда мы указываем длинну нашего массива
array2[0]="privet";      array3[0][0]=3.14;
array2[1]="poka";        array3[2][1]=4.5;
array2[2]="ok";

double[] array5;
 array5 = new double[2];
 array5[0]=2.5;
 array5[1]=3.5;

 array3[1]=array5;//заполнили одномерный массив в многомерном мосиве массивом array5

б) Динамическая инициализация массива
одномерного:
for (int i = 0; i < array1.length; i++) {
            array1[i] = "privet" + i;
            System.out.println(array1[i]);
            }

многомерного:
 for (int i = 0; i <array2.length ; i++) {//первый луп гоняет на по строкам
            for (int j = 0; j <array2[i].length ; j++) { //второй луп гоняет по столбцам внутри сроки
                array2[i][j]=i+j;
                System.out.println(array2[i][j]);
            }
        }

------------Смешанные варианты создания массива------------------------------------------------


int[]array3=new int[7];

int[]array2={1,2,3};

int[]array1;
array1=new int[]{1,2,3};
!!! нельзя обьявлять массив таким образом:
int[]array1;
array1={1,2,3}; !!!!!

int[]array4=new int[]{1,2,3,4};
!!! нельзя обьявлять массив таким образом:
int[]array4=new int[3]

------------------------class Arrays-----------------------------------------------------------
Методы Arrays

1) sort(array) --метод сортирует массив Arrays.sort(array1);
int[]array1={1,2,3};
Arrays.sort(array1);


2) binarySearch(array,value) --метод выполняет поиск определенного значения в определенном массиве
(данный поиск будет корректно работать в отсортированном массиве)
данный метод выдаёт индекс на котором находится наш элемент
Усли элемент не найден, метод возвращает отрицательный индекс
int[]array1={1,2,3};
Arrays.sort(array1);
int index=Arrays.binarySearch(array1,2);

int array1[]={1,43,6,7,8};
после sort наш массив будет выглядить так:{1,6,7,8,43}
int index1=Arrays.binarySearch(array1,8);
System.out.println(index1);//3


