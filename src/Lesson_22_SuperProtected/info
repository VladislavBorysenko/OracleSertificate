
----------------- 3 принципа ООП-------------------

1) Encapsulation(сокрытие данных)
2) Inheritance(наследование)
3) Polymorphism(полиморфизм)

--Encapsulation--
-Сокрытие данных, защита их от внешнего нежелательного вмешательства,
 помещение их в "капсулу".
-Характеризуется private переменными и public методами get и set, которые
 нередко проверяют какие-либо условия.
-Если return type метода get - это mutable тип данных, то лучше возвращать его копию

-----Inheritance(наследование)------
синтаксис наследования:

 class Parent                   { some code }
 class Child extends Parent     { some code }
Дочерний класс может называться: Derived class
                               Child class
                               Subclass
                               Extended class

Родительский класс может называться: Super class
                                     Parent class
                                     Base class
__________________________________________________________

-----------Зачем нужно наследование-------------------
--Более кароткое написание классов
--Лёгкость в изменении/добовлении общих элементов
--Extensibility(растежимость)
--Более легкое тестирование классов
--Групировка классов под общим типом

______________________Отношение между классами_______________________
"Is-a" relationship (Это)

class Animal{}
class Mouse extends Animal{}
Mouse is a Animal (класс Мішь єто подкласс класса Животные: "мышь это животное")

"Has-a" relationship (Имееет)

class Window{}
class House{
Window w=new Window(); }
House has Window (Класс дом имеет класс окно)

Класс Object является прорадителем всех классов в Java
Это единственный класс, у которого нет родителя.

________Что наследуется классом?_________
-Элементы с access modifier public
-Элемент с access modifier, только child класс находится в том же пакете, что и parent class
-Элемент с access modifier privet не наследуются, но наследуются public методы, которые могут работать с ними
-Элемент с access modifier protected видны там же, где и элементы с access modifier default+ в subclass-ax
parent класса. Таким образом, элементы с access modifier protected наследуются внезависимости от
того в каком пакете находится child class.
-Конструкторы не наследуются
___________________________________________

-----Keyword "super" в конструкторе------

                                 class Y extends X{
class X{                            public Y(){
public X(String s){      ====>  super("ok");
System.out.println(s);          System.out.println("privet");
 }                                  }
}                                  }

Выражение super вызывает конструктор super класса, который заканчивает свою работу всегда раньше
конструктора child класса

Выражение super если есть, то должно стоять на 1-ой строке конструктора

Если мы сами не пишем выражение super, то компилятор сам его дописывает, обращаясь к конструктору
без параметров super класса

Выражения super и this не могут одновременно находиться в теле конструктора
