_________________________Методы equals и toString_______________________________________________________________________
Если вы перезаписываете метод equals, всегда используйте в его параметре тип данных Object

Правильно илогично перезаписанный метод equals должен обладать следующими свойтсвами:
1) Симетричность- для non-null ссылочных переменных a и b, a.equals(b) возвращает true тогда и тоько тогда,
когда b.equals(a) возвращает true;
2) Рефлективность- для non-null ссылочных переменной a,a.equals(a) всегда должно возвращать true;
3) Транзитивность- для non-null ссылочных переменных a,b и c, если a.equals(b) и b.equals(c) возвращает true,
то a.equals(c) тоже должно возвращать true;
4) Постоянство- для non-null ссылочных переменных a и b, неоднократный вызов a.equals(b) должен возвращать или только
true, или только false;
5) Для non-null ссылочной переменной a, a.equals(null) всегда должен возвращать false;

Метод toString принадлежит классу Object, возвращает строковое представление обьекта. Дефолтная реализация данного метода
возвращает имя ,@, число (результат метода hashcode данногообьекта).


_________________________________Wrapper classes________________________________________________________________________
Wrapper classes -классы обертки.
Позволяют нам видеть примитивные типы данных как классы.

byte - Byte
short - Short
int - Integer
long - Long
float - Float
double - Double
char - Char
boolean - Boolean

Процессы которые происходят с wrapper классами:
 Autoboxing - это конвертирование примитивных типов данных в соответсвующий wrapper класс ( Long l =50l;)
 Unboxing - это конвертирование обьекта типа wrapper класс в соответствующий примитивный тип данных
 (  list.add(5); int a = list.get(0) ) a=5

Метод parse- позволяет конвертировать подходящее значение типа данных String в соответсвующий примитивный тип данных.
(String s1="50"; int i1=Integer.parseInt(s1);)
(String s2="true"; boolean  boolean b1=Boolean.parseBoolean(s2);)

Метода valueOf позволяет нам создать новый обьект wrapper класса того типа, на котором данный метод был вызван
(Integer i2=Integer.valueOf(10);)
( Double d2=Double.valueOf(s3);)

_________________________Method overloading, приоритетность методов_____________________________________________________

Если при вызове метода его параметр лист соответствует нескольким параметр листам overloaded методов, то приоритет их
вызова выглядит следующим образом:
1) Точное совпадение типов даннх
2) Поглащающие типы данных (Большие типы данных для primitive и parent для reference типов)
3) Autoboxed типы данных
4) Varargs

!Конвертация типов данных для соответствия параметр листу метода не может происходить в 2 этапа

_________________________Non static and static initializers_____________________________________________________________

Initializer block срабатывает каждый раз, когда создается новый обьект соответствуещего класса
Static initializer block срабатывает один раз, когда класс загружается в память

1) Initializer block срабатывает каждый раз, когда создается новый обьект соответствуещего класса
2) Static initializer block срабатывает один раз, когда класс загружается в память

Равнозначные initializer блоки выполняются в той последовательности,в которой они написаны вклассе.

Последовательность инициализации initializer блоков и переменных:
а) Статические блоки и переменные родительского класса;
б) Статические блоки и переменные дочернего класса;
в) Не статические блоки и переменные родительского класса;
г) Конструктор родительского класса;
д) Не статические блоки и переменные дочернего класса;
е) Конструктор дочернего класса.
Инициализация пунктов 3-6 происходит только и при каждом создании обьекта

_____________________Non-access modifiers_______________________________________________________________________________

transient. - Переменные класса с ключевым словом transient не сериализуются (преаброзуются в форму пригодную для хранения)
native. - Методы с ключевым словом native реализованны не на Java. В своем описании они не имеют тела и заканчиваются
 как абстрактные методы символом <<;>>
synchronized. - Методы с ключевым словом synchronized могут быть использованны в одно и тоже время только одним потоком.
volatile. -Перменные с ключевым словом volatile могут быть изменены разными потоками и данные  изменения будт видны
 во всех потоках.
strictfp. - Ключевое слово strictfp в методах и классах ограничивает точность вычислений с float и double
 по стандарту IEEE.