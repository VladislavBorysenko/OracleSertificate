_________________________________Введение в java.io_____________________________________________________________________
java.io -это пакет, в котором собранны классы и интерфейсы, которые предназначены, если обобщить, для чтения и записи
информации из/в какой-либо источник, например файл

Класс File -абстрактная репрезинтация пути к файлу или папке.

Класс FileInputStream предназначен для создания потока, с помощью которого можно читать информацию из источнника.

Метод read считывает информацию с потока

Класс FileOutputStream предназначен для создания потока, с помощью которого можно писать информацию в источник.

Метод write записывает информацию через поток в файл

 File f=new File("test9.txt");//абстрактный адресс(путь к файлу )
        FileInputStream fis=new FileInputStream(f);
        fis.read();
        FileOutputStream fos=new FileOutputStream(f);
        fos.write(100);
-----------------------------------------------------------------------------------------------------------------------
Конструкторы классов FileInputStream и FileOutputStream могут выбрасывать исключение:
FileNotFoundException

Методы read и write классов FileInputStream и FileOutputStream могут выбрасывать исключение IOException.
!!!FileNotFoundException происходит от IOException

_________________________________Исключения_____________________________________________________________________________
Обработка искючений позволяет нам разганичивать код на код, который должен выполняться при обычном протекании программы
и код, который должен выполняться при выбросе исключений.
--------------------------------Иерархия классов------------------------------------------------------------------------

Object
    ||
    \/
 Throwable  =======================================================> Error
    ||
    \/
 Exception
 ||
 \/
 RunTimeException

_________________________________try_catch_finally______________________________________________________________________

try-catch метод который ловит exception, и реализует код если exception был пойман

try{ код в котором может быть exception }
catch(exception e // exception который выкинит код в блоке try){ код который будет выполняться если  try выкинит exception}

пример:     try {
                       System.out.println(array[5]);

                   } catch (ArrayIndexOutOfBoundsException e) {
                       System.out.println("Bil poiman Exception");
                   }

finally блок, будет всегда обрабатываться (работает только с try. отдельно не работатет )

try {
            System.out.println(array[5]);
            System.out.println("Vsem horoshego dnya");
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Bil poiman Exception " + e);
        }
        finally {
            System.out.println("eto finally block");
        }

Так должен выглядить try catch block
try{some code}
catch(Exception_name_1 e){some code}
catch(Exception_name_2 e){some code}
            ...........
catch(Exception_name_n e){some code}
finally{some code}

-Несколько catch блоков могут следовать за try блоком, но лишь 1 finally блок может следовать за catch блоками

-Одновременно вы можете использовать все 3 типа блоков или по 2:try блок с catch блоком/ами; try блок с finally блоком.
По отдельности блоки использовать не возможно.

-Последовательность блоков должна соответствовать всегда следующему порядку: try -> catch -> finally
!!! между этими блоками, мы не можем писать какой либо другой код

-finally блок выполняеться вне зависимости от тоговыбросилось исключение или нет.

_________________________________Сабклассы RuntimeException = unchecked exception_______________________________________
-Runtime исключения бывают в коде, в котором присутствуют ошибачные выражения. Т.е. в выбросе данных исключений виноват
программист. Компилятор НЕ в состоянии проверить возможность выброса runtime исключений.

-Runtime исключения можно не обьявлять и не обрабатывать, но при желании можно сделать и то и другое.

_________________________________Сабклассы Exception=checked exceptions_________________________________________________
-Checked исключения указывают на часть кода, который находится за пределами непосредственного контроля программой и
который может являться причиной выброса исключений. Они как правило возникают при взаимодействии вашей программы с
внешними источниками (работа с файлами, БД, сетью), из за которых могут возникать проблемы. Кампилятор всегда проверяет
возможность выброса checked исключений.

-Checked исключения всегда должны быть или обьявлены и/или обработанны.

-Также мы можем обьявить exception в сигнатурем метода где он может возникнуть. При этом exception не будет обрабатываться
 void abc() throws Exception{}

-Если метод а использует внутри себя метод b, который может выбросить checked исключение, то метод а дожен:
1) Или заключить вызов метода b в try/catch блоки;
2) Или/и обьявить, что он тоже можетвыбросить это checked исключение или его super класс

________________________________________________________________________________________________________________________
_________________________________ERROR__________________________________________________________________________________
Error-это очень серьезные ошибки, которые не могут быть напрямую контролированны вашей программой
Error-ы могут быть обьявленны, но обьявлять error-ы считается глупой практикой. Некоторые error-ы могут быть обработанны,
но это тоже будет очень глуппой затеей. Error-ы, как и runtime исключения считаются unchecked(Компилятор не видит их до
запуска программы)

_________________________________Важные момоенты в исключениях__________________________________________________________
Очередность catch блоков очень важна. Кампилятор не пропустит код, если исключение <<super class>> будет стоять перед
исключением <<sub class>>

Если в части кода, которая не находиться в блоке try или в блоке try выбрасывается исключение, то соответствующая
оставшаяся часть кода уже не обрабатывается

После выброса исключения мы можем увидеть стэк трейс для всех методов, задейстованных в выбросе этого исключения

При создании обьекта исключения вы можете воспользоваться его конструктором, который принимает String параметр и вписать
в него необходимую информацию. Вы тоже можете воспользоваться конструктором, который не принимает параметры.

catch (Exception e){
System.out.println(e);// выводит на экран тип исключения и сообщение(мессаж)
System.out.println(e.getMessage());//выводит на экран сообщение(мессаж)
e.printStackTrace();}//выводит на экран стэк трейс


__________________________Важные моменты в исключениях__________________________________________________________________

finally блок выполняеться даже в том случае, если в try блоке или в catch блоке имеется return statement.

finally блок не выполнится только в том случае, если вы прекращаете работу программы с помощью System.exit в try блоке
или в catch блоке или же, если происходит крушение JVM или, например, операционной системы

Если return statement имеется в catch блоке, и в finally блоке, то оутпутом метода будет возвращаемое занчение
 из finally блока

Если return statement в catch блоке возвращает primitive data type, то в finally блоке вы его изменить не сможете.
Если return statement в catch блоке возвращает return data type, то в finally блоке вы сможете его изменить
(естественно, если тип mutable)

Исключенеие может быть перевыброшенно. Это обычно делают тогда, когда код вашего текущего метода обработал данное исключение
не полностью и выбрасывает его вновь, чтобы метод, который будет вызывать текущий метод завершил обработкук данного исключения

При написании кода, вы можете использовать вложенные блоки try, catch и finally

Если исключение выбрасывается из catch блока, то оно не может быть обработанно одноуровневым catch блоком.

При написании кода, вы можете создавать свои собственные исключения. В зависимости от необходимости, создавайте исключения
которые наследуются от класссов Exception или RuntimeException.

_______________________Распространенные сабклассы RuntimeException______________________________________________________

ArrayIndexOfBoundsException-выбрасывается тогда когда мы используем индекс массива меньше нуля или который больше его длины минус единица
IndexOfBoundsException
ArithmeticException-выбрасывется когда вы пытаетесь делить на ноль
ClassCastException
IllegalArgumentException (Выбрасуется когда мы вписали в метод какойто не правильный параметр или аргумент)
IllegalStateException (Сигнализирует о том что метод вызывается в неподходящее время)
NullPointerException (Eсли поле обьекта или переменная пустая (Null))
NumberFormatException (Наследник IllegalArgumentException)

_____________________Распространенные сабклассы Error___________________________________________________________________
 ExceptionInInitializerError - выбрасывается когда в статических инишилайзерах выбрасывается RunTimeException
 StackOverflowError - переполнен стэк
 OutOfMemoryError - переполнена память
 NoClassDefFoundError - Джава не может найти какой-либо класс во вроемя запуска программы

____________________Исключения, method overriding and overloading, construction_________________________________________
Если класс перезаписывает метод из суперкласса или имплементирует метод из интерфейса, непозволительно добовлять в его
сигнатуру новые checked исключения из перезаписанного метода супер класса или дочерние классы данных исключений

Вышенаписанное правлио никаким образом не относится к перезагруженным методам

Конструктор может выбрасывать исключения. Конструктор в своей сигнатуре должен описывать все исключения конструктора
 супер класса, который он вызывает, может описывать супер классы данных исключений, а также добовлять новые исключения

_______________________Важные методы в исключениях______________________________________________________________________
Указание в сигнатуре метода исключения, которое не будет выбрасываться в данном методе не является ошибкой.

!!! NOT OK !!!

static void abc(){}
public static void main(String[]args){
try{abc();}
catch (IOException e){}
}


!!! OK !!!

static void abc()throws IOException{}
public static void main(String[]args){
try{abc();}
catch (IOException e){}
}

Unreachable statements
так писать нельзя

public int abc()throw Exception{
throw new Exception();
return 5; }

public int abc()throw Exception{
return 5;
 throw new Exception();}

