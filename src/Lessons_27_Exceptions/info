___________________Введение в java.io___________________________________________________________________________________
java.io -это пакет, в котором собранны классы и интерфейсы, которые предназначены, если обобщить, для чтения и записи
информации из/в какой-либо источник, например файл

Класс File -абстрактная репрезинтация пути к файлу или папке.

Класс FileInputStream предназначен для создания потока, с помощью которого можно читать информацию из источнника.

Метод read считывает информацию с потока

Класс FileOutputStream предназначен для создания потока, с помощью которого можно писать информацию в источник.

Метод write записывает информацию через поток в файл

 File f=new File("test9.txt");//абстрактный адресс(путь к файлу )
        FileInputStream fis=new FileInputStream(f);
        fis.read();
        FileOutputStream fos=new FileOutputStream(f);
        fos.write(100);
-----------------------------------------------------------------------------------------------------------------------
Конструкторы классов FileInputStream и FileOutputStream могут выбрасывать исключение:
FileNotFoundException

Методы read и write классов FileInputStream и FileOutputStream могут выбрасывать исключение IOException.
!!!FileNotFoundException происходит от IOException

________________________________-Исключения_____________________________________________________________________________
Обработка искючений позволяет нам разганичивать код на код, который должен выполняться при обычном протекании программы
и код, который должен выполняться при выбросе исключений.
--------------------------------Иерархия классов------------------------------------------------------------------------

Object
    ||
    \/
 Throwable  =======================================================> Error
    ||
    \/
 Exception
 ||
 \/
 RunTimeException

_________________________try_catch_finally______________________________________________________________________________

try-catch метод который ловит exception, и реализует код если exception был пойман

try{ код в котором может быть exception }
catch(exception e // exception который выкинит код в блоке try){ код который будет выполняться если  try выкинит exception}

пример:     try {
                       System.out.println(array[5]);

                   } catch (ArrayIndexOutOfBoundsException e) {
                       System.out.println("Bil poiman Exception");
                   }

finally блок, будет всегда обрабатываться (работает только с try. отдельно не работатет )

try {
            System.out.println(array[5]);
            System.out.println("Vsem horoshego dnya");
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Bil poiman Exception " + e);
        }
        finally {
            System.out.println("eto finally block");
        }

Так должен выглядить try catch block
try{some code}
catch(Exception_name_1 e){some code}
catch(Exception_name_2 e){some code}
            ...........
catch(Exception_name_n e){some code}
finally{some code}

-Несколько catch блоков могут следовать за try блоком, но лишь 1 finally блок может следовать за catch блоками

-Одновременно вы можете использовать все 3 типа блоков или по 2:try блок с catch блоком/ами; try блок с finally блоком.
По отдельности блоки использовать не возможно.

-Последовательность блоков должна соответствовать всегда следующему порядку: try -> catch -> finally
!!! между этими блоками, мы не можем писать какой либо другой код

-finally блок выполняеться вне зависимости от тоговыбросилось исключение или нет.

________________Сабклассы RuntimeException = unchecked exception________________________________________________________
-Runtime исключения бывают в коде, в котором присутствуют ошибачные выражения. Т.е. в выбросе данных исключений виноват
программист. Компилятор НЕ в состоянии проверить возможность выброса runtime исключений.

-Runtime исключения можно не обьявлять и не обрабатывать, но при желании можно сделать и то и другое.

_________________Сабклассы Exception=checked exceptions_________________________________________________________________
-Checked исключения указывают на часть кода, который находится за пределами непосредственного контроля программой и
который может являться причиной выброса исключений. Они как правило возникают при взаимодействии вашей программы с
внешними источниками (работа с файлами, БД, сетью), из за которых могут возникать проблемы. Кампилятор всегда проверяет
возможность выброса checked исключений.

-Checked исключения всегда должны быть или обьявлены и/или обработанны.

-Также мы можем обьявить exception в сигнатурем метода где он может возникнуть. При этом exception не будет обрабатываться
 void abc() throws Exception{}