В java обьекты класса могут ссылатся на другие классы если они являются подклассами
Employee emp=new Doctor();// Класс Doctor является дочерним классом Employee
--------------------------------------------------------------------------
                                     |           class Test{
class Animal{ }                      |           public static void main(String [] args){
class Mouse extend Animal{ }         |            Animal a=new Animal();
                                     |            Mouse m=new Mouse();
                                     |            Animal an=new Mouse() }
                                     |            } //because Mouse is Animal

Если переменная типа данных super класса ссылается на обьект sub класса,
то с помощью этой переменной можно вызывать только уноследованные от super класса элементы

class Test1{
public Animal abc(){
return Mouse();
    }//because Mouse is Animal
}

class Test2{
public Object def(){
return new int[]{2,4,5}
    }//because array is Object
}
___________________________________________________________________________________________
---METHOD OVERRIDING----
-это изменение non-static, non-final метода в sub классе, который он унаследовал от parent класса.
OVERRIDING-перезаписанный (!Не OVERLOADING!)
___________________________________________________________________________________________
Методы считаются overriding, если:
-Имя метода в sub классе такое жи что и в parent классе;
-Спмсок аргументов в sub классе такой же, что и в parent классе;
-Return type в sub классе такой-же как и в parent классе или
 return type в sub классе это sub-класс return type из parent класса
 (covariant return types, Метод возвращает обьект sub класса, который является обьектом sub-sub-класса)
-Access modifier в sub классе такой же или менее строгий чем в parent классе;
-Метод в sub классе должен быть non-static
--------------!!!Понятия Variable Overriding не существует!!!------------------
____________________________________________________________________________________________

-Binding - определение вызываемого метода, основываясь на обьекте, который производит вызов или
типе данных reference variable

-compile time binding -осуществляется при компиляции программы (или static time banding)
 к нему относятся: privet methods
                   static methods
                   final methods  (!!!Все эти методы не могут быть overriding)

-run time binding-осуществляется при обработки программы,
 относяться все оставшиеся методы
 динамичный выбор актуального метода основан на актуальном обьекте
!!!Все перепенные имеют Compile time binding

_______________________________________________________________________________________________
                    Method hiding
-Это перекрытие static методов из parent класса в sub классе.
-Методы считаются hidden, если:
-Имя в sub классе такое же, что и parent классе;
-Список аргументов в sub классе такой-же что и в parent классе;
-Return type в sub классе - это sub класс return type из parent класса (covariant return types);
-Access modifier в sub классе такой же или менее строгий, чем в parent классе;
-Если в parent классе метод является static, то и в sub классе он должен быть static

Variable hiding - Обьявление в sub классе переменной с таким же именем (Не обязательно типом )б
что и в parent классе.
--------------------------------------------------------------------------------------------------
\\что можно делать override:
все методы, которые не являются static, final или privet.
\\что можно делать hide:
static методы
non privet variables

!!!private методы и переменные нельзя делать ни override, ни hide.
    final методы нельзя делать ни override, ни hide
  Мы можем использовать annotation @Override, когда перезаписываем метод
.............................................................................

!!!Почему static методы нельзя сделать override?
Overriding и polymorphism напрямую связаны с созданием обьектов- в зависимости от типа обьектов
вызываются ти или иные методы. А само понятие static не подразумевает под собой процес создания обьектов
________________________________________________________________________________

final метод - это метод который не может быть overridden или hidden.
final класс - это класс который не может иметь потомков

---------------------------------------------------------------------------------------------------
-Обращение к элементам super класса с помощью keyword "super"
-Keyword "super" означает обращение к обьекту родительского класса.
-С помощью keyword "super" можно обращаться как к методам так и к переменным родительского класса
-!!!Невозможно использовать keyword "super" в static методах и переменных
-Для того чтобы обратиться к элементам родительского класса с помощью
keyword "super", эти элементы должны быть видны в дочернем классе.
-При обращении к методу родительского класса, выражение "super" не обязательно должно быть первой строкой тела метода