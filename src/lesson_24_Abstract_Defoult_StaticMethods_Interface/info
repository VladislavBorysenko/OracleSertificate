-----------abstract классы и abstract методы----------------------------------------------------------------------------
-У abstract методов не бывает тела
-Не возможно создать обьект abstract класса
-Если в классе есть abstract метод, то этот класс тоже должен быть abstract
-abstract класс может содержать, а может и не содержать abstract методы
-Дочерниий класс должен перезаписать все abstract методы родительского класса или тоже быть abstract
-Можно использовать reference variable типа abstract класса чтобы ссылаться на обьект дочернего класса,
    который не является abstract
-abstract класс не может быть final
-Переменные не могут быть abstract
-У abstract классов есть конструктор
-Любой перезаписаный метод может быть как abstract, так и не abstract
-Для методов не допустимо сочетание: final abstract, private abstract, static abstract.

----------------Interface-----------------------------------------------------------------------------------------------
создаем interface
interface name (){};
 !!!Interface может содержать в себе только абстрактные методы(без тела метода : "void abc();")
implements -воплощает в жизнь (осуществлять)
Класс может имплемитировать сразу несколько интерфейсов -implements Help_able,Swim_able

interface Jumpable{               |  интерфейс может содержать в себе из переменных:
void jump(int santimetr);         |   !!!только константы
int CONSTANT=18;                  |по умолчанию компилятор будет считать public final int CONSTANT=18;
}
класс может импементировать интерфейс Jumpable, перезаписать метод Jump и использовать константу

class Animal implements Jumpable{
public void jump(int santimetr){
System.out.println("Animal can jump");
System.out.println("Number"+CONSTANT);
}
}

    Интерфейс-этоконструкция языка программирования, которую часто сравнивают с контрактом.
В этом контракте указанно, что класс может делать, т.е. какие методы в нём будут присутсвовать,
усли он имплементируетданный интерфейс. Когда класс имплементирует какой либо интерфейс, он
обязуется снабдить методы этого интерфейса телами (перезаписать абстрактные методы);
в противном случае класс должен быть абстрактным.
Т.о. если известно, что класс имплементировал  какой либо интерфейс,
то в этом классе гарантированно будут методы из интерфейса.

! Не возможно создать обьект интерфейса, потому что это не ласс.

-У интерфейса нет конструкторов.
-Access modifier у всех топ-левел интерфейсов или public, или default.
-Если не указать самостоятельно, то компилятор добавит в определение интерфеса слово abstract
-интерфейс не может быть final
-Если не указать самостоятельно, то компилятор добавит в определение всех non-default (не access modifier)
и non-static методов слова abstract и public
-методы интерфейса не могут быть final
-Из переменных в интерфейсе могут быть только константы, которые должны быть в нём инициализированны
-Если не указать самостоятельно, то компилятор добавит в определение всех переменных слова public, final и static
-Если класс, который имплементировал интерфейс не перезаписла все его методы, то этот класс должен обьявляться abstract
------------------------------------------------------------------------------------------------------------------------
it is OK:
interface l1{ void abc(int a);}
interface l2{ void abc(String s);}
class Test implements l1, l2{
public void abc(int a){ some code}
public void abc(String s){ some code}
}

it is NOT OK:
interface l1{ void abc(int a);}
interface l2{ int abc(int a);}
class Test implements l1, l2{
public void abc(int a){ some code}
public void abc(int a){ return 5; }
}
------------------------------------------------------------------------------------------------------------------------

interface Jumpable{ void jump(); }
class Human implements Jumpable {
public void jump(){ some code}
 class Animal implements Jumpable {
 public void jump(){ some code}
}
            ||
            \/
class Test{
public static void main(String[] args){
    Jumpable j1=new Human();
    Jumpable j2=new Animal();
    j1.jump();  j2.jump();
    }
}


______________class & interface inheritance (Наследование которое относиться, и к интерфейсу, и к классу)_______________
Класс может наследовать 0 или 1 класс. Для наследования класс использует keyword "extends"
Класс может имплементировать 0 или более интерфейсов. Для имплементирования класс использует keyword "implements"
Класс не может наследовать интерфейс
Интерфейс не может наследовать или имплементировать класс
Интерфейс может наследовать 0 или более интерфейсов. Для наследования интерфейс использует keyword "extends"
Конкретный класс может наследовать конкретный или абстрактный класс
abstract класс может наследовать конкретный или абстрактный класс и имплементировать интерфейс
Первый конкретный класс в иерархии должен снабдить все abstract методы телами

------------------------------------------------------------------------------------------------------------------------

__________________default методы в interface____________________________________________________________________________

interface Jumpable{
default void jump(){
System.out.println("You can jump!!!");}
}
}

default метод в интерфейсе, всегда имеет тело

Данное слово default никаким образом не связанно с access modifier.
Access modifier default-ных методов в интерфейсе -public, который будет добавлен компилятором,
 если его не указать самостоятельно
default методы предоставляют дефолтную реализацию метода и могут быть созданны только в интерфейсе
Если в интерфейсе создан default метод, то он должен иметь тело.
default методы не должны быть static, final или abstract
_______________________________________________________________________________________________________________________

interface I1{ default void abc(){
System.out.println("I1"); }}
interface I2 { default void abc(){
System.out.println("I2");  }}
interface I3{void abc();}
}

not OK!
class Test1 implements I1, I2{}
abstract class Test2 implements I1, I3{}

OK
class Test3 implements I1, I2{ public void abc(){System.out.println("Test3"); }}
class Test4 implements I1, I3{ public void abc(){System.out.println("Test4"); }}

_______________________________________________________________________________________________________________________
--static методы в interface--

interface I4{ static void abc(){
System.out.println("Static method");}
}

Если не указать самостоятельно, то компилятор добавит в определение всех static методов слово public.
static методы не наследуются ни одним классом, который имплеметирует интерфейс.
Для вызова static метода необходимо использовать имя интерфейса

____________________________Изминение в java 9__________________________________________________________________________
-стало можно использовать access modifier private:
private method
private static method

-private interface не может быть abstract
-private interface может быть использован только внутри интерфейса
-private static метод может быть использован внутри static или non-static методов
-private non-static метод НЕ может быть использован внутри private static методов
------------------------------------------------------------------------------------------------------------------------

!it is NOT OK:
interface I1{ int A=5; }
interface I2{ int A=10; }
class Test implements I1,I2{
public void abc(){ System.out.println(A);} }

it is OK:
interface I1{ int A=5; }
interface I2{ int A=10; }
class Test implements I1,I2{
public void abc(){ System.out.println(I1.A);}
public void def(){ System.out.println(I2.A);}
}